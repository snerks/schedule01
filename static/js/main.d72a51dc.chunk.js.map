{"version":3,"sources":["App.tsx","serviceWorker.js","index.tsx"],"names":["App","timeUnits","hour","color","backgroundColor","value","width","toString","length","Array","test","join","_this2","this","currentHour","Date","getHours","timeUnitItems","map","timeUnit","index","react_default","a","createElement","key","style","fontWeight","fontSize","border","zeroFill","className","margin","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA6FeA,oNAxFbC,UAAY,CACV,CAAEC,KAAM,EAAGC,MAAO,QAASC,gBAAiB,SAC5C,CAAEF,KAAM,EAAGC,MAAO,QAASC,gBAAiB,SAC5C,CAAEF,KAAM,EAAGC,MAAO,QAASC,gBAAiB,SAC5C,CAAEF,KAAM,EAAGC,MAAO,QAASC,gBAAiB,SAC5C,CAAEF,KAAM,EAAGC,MAAO,QAASC,gBAAiB,SAC5C,CAAEF,KAAM,EAAGC,MAAO,QAASC,gBAAiB,OAC5C,CAAEF,KAAM,EAAGC,MAAO,QAASC,gBAAiB,OAC5C,CAAEF,KAAM,EAAGC,MAAO,QAASC,gBAAiB,UAC5C,CAAEF,KAAM,EAAGC,MAAO,QAASC,gBAAiB,SAC5C,CAAEF,KAAM,EAAGC,MAAO,QAASC,gBAAiB,SAC5C,CAAEF,KAAM,GAAIC,MAAO,QAASC,gBAAiB,SAC7C,CAAEF,KAAM,GAAIC,MAAO,QAASC,gBAAiB,SAE7C,CAAEF,KAAM,GAAIC,MAAO,QAASC,gBAAiB,SAC7C,CAAEF,KAAM,GAAIC,MAAO,QAASC,gBAAiB,SAC7C,CAAEF,KAAM,GAAIC,MAAO,QAASC,gBAAiB,SAC7C,CAAEF,KAAM,GAAIC,MAAO,QAASC,gBAAiB,SAC7C,CAAEF,KAAM,GAAIC,MAAO,QAASC,gBAAiB,SAC7C,CAAEF,KAAM,GAAIC,MAAO,QAASC,gBAAiB,OAC7C,CAAEF,KAAM,GAAIC,MAAO,QAASC,gBAAiB,OAC7C,CAAEF,KAAM,GAAIC,MAAO,QAASC,gBAAiB,UAC7C,CAAEF,KAAM,GAAIC,MAAO,QAASC,gBAAiB,SAC7C,CAAEF,KAAM,GAAIC,MAAO,QAASC,gBAAiB,SAC7C,CAAEF,KAAM,GAAIC,MAAO,QAASC,gBAAiB,SAC7C,CAAEF,KAAM,GAAIC,MAAO,QAASC,gBAAiB,kFAGtCC,EAAeC,GAGtB,OAFAA,GAASD,EAAME,WAAWC,QAEd,EAER,IAAIC,MAAMH,GAAS,KAAKI,KAAKL,EAAME,YAAc,EAAI,IAAII,KAAK,KAC9DN,EAGGA,EAAQ,oCAGR,IAAAO,EAAAC,KAEDC,GADkB,IAAIC,MACQC,WAE9BC,EAAgBJ,KAAKZ,UAAUiB,IAAI,SAACC,EAAUC,GAAX,OACvCC,EAAAC,EAAAC,cAAA,OACEC,IAAKJ,EACLK,MAAO,CACLC,WAAY,OACZC,SAAU,GACVvB,gBAAiBe,EAASf,gBAC1BD,MAAOgB,EAAShB,MAChByB,OAAQd,IAAgBK,EAASjB,KAAO,kBAAoB,KAG7DU,EAAKiB,SAASV,EAASjB,KAAM,GAVhC,SAeF,OACEmB,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OAebT,EAAAC,EAAAC,cAAA,OACEE,MAAO,CACLM,OAAQ,IAGTd,WAlFOe,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d72a51dc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n  timeUnits = [\n    { hour: 0, color: \"white\", backgroundColor: \"green\" },\n    { hour: 1, color: \"white\", backgroundColor: \"green\" },\n    { hour: 2, color: \"white\", backgroundColor: \"green\" },\n    { hour: 3, color: \"white\", backgroundColor: \"green\" },\n    { hour: 4, color: \"white\", backgroundColor: \"green\" },\n    { hour: 5, color: \"white\", backgroundColor: \"red\" },\n    { hour: 6, color: \"white\", backgroundColor: \"red\" },\n    { hour: 7, color: \"black\", backgroundColor: \"orange\" },\n    { hour: 8, color: \"white\", backgroundColor: \"green\" },\n    { hour: 9, color: \"white\", backgroundColor: \"green\" },\n    { hour: 10, color: \"white\", backgroundColor: \"green\" },\n    { hour: 11, color: \"white\", backgroundColor: \"green\" },\n\n    { hour: 12, color: \"white\", backgroundColor: \"green\" },\n    { hour: 13, color: \"white\", backgroundColor: \"green\" },\n    { hour: 14, color: \"white\", backgroundColor: \"green\" },\n    { hour: 15, color: \"white\", backgroundColor: \"green\" },\n    { hour: 16, color: \"white\", backgroundColor: \"green\" },\n    { hour: 17, color: \"white\", backgroundColor: \"red\" },\n    { hour: 18, color: \"white\", backgroundColor: \"red\" },\n    { hour: 19, color: \"black\", backgroundColor: \"orange\" },\n    { hour: 20, color: \"white\", backgroundColor: \"green\" },\n    { hour: 21, color: \"white\", backgroundColor: \"green\" },\n    { hour: 22, color: \"white\", backgroundColor: \"green\" },\n    { hour: 23, color: \"white\", backgroundColor: \"green\" }\n  ];\n\n  zeroFill(value: number, width: number) {\n    width -= value.toString().length;\n\n    if (width > 0) {\n      return (\n        new Array(width + (/\\./.test(value.toString()) ? 2 : 1)).join(\"0\") +\n        value\n      );\n    }\n    return value + \"\"; // always return a string\n  }\n\n  render() {\n    const currentDateTime = new Date();\n    const currentHour = currentDateTime.getHours();\n\n    const timeUnitItems = this.timeUnits.map((timeUnit, index) => (\n      <div\n        key={index}\n        style={{\n          fontWeight: \"bold\",\n          fontSize: 12,\n          backgroundColor: timeUnit.backgroundColor,\n          color: timeUnit.color,\n          border: currentHour === timeUnit.hour ? \"3px solid white\" : \"\"\n        }}\n      >\n        {this.zeroFill(timeUnit.hour, 2)}\n        :00\n      </div>\n    ));\n\n    return (\n      <div className=\"App\">\n        {/* <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header> */}\n        <div\n          style={{\n            margin: 0\n          }}\n        >\n          {timeUnitItems}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}